<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-11-01T17:58:55-07:00</updated><id>http://localhost:4000/</id><title type="html">Justin Wendlandt’s Blog</title><subtitle>Application Development on Azure</subtitle><entry><title type="html">Handling Many to Many Updates in ASP.NET Core</title><link href="http://localhost:4000/2017/10/18/handling-many-to-many-asp-net/" rel="alternate" type="text/html" title="Handling Many to Many Updates in ASP.NET Core" /><published>2017-10-18T05:44:00-07:00</published><updated>2017-10-18T05:44:00-07:00</updated><id>http://localhost:4000/2017/10/18/handling-many-to-many-asp-net</id><content type="html" xml:base="http://localhost:4000/2017/10/18/handling-many-to-many-asp-net/">&lt;p&gt;When updating a database object using Entity Framework Core and ASP.NET Core there is a decent amount of complexity involved with handling what’s in the database and what is selected from the UI.
­&lt;/p&gt;

&lt;h3 id=&quot;scenario&quot;&gt;Scenario&lt;/h3&gt;
&lt;p&gt;Say we have a table Post and another table Tag with a many-to-many relationship between them defined as PostTag. When the user is editing a post, they have the opportunity to select and de-select options that may already exist in the database. Below there are a few options in how to handle this, but one of the more performant options is to do more of a “merge” operation between what’s in the database and what is selected in the UI.&lt;/p&gt;

&lt;h3 id=&quot;the-brute-force-method&quot;&gt;The Brute Force Method&lt;/h3&gt;
&lt;p&gt;One approach could be to call .Clear() on the collection and then call .Update(post) on the context. The issue with this is that we may be deleting items from the many-to-many table that we may want to keep in the database because they are still selected in the UI.&lt;/p&gt;

&lt;h3 id=&quot;the-merge-method&quot;&gt;The “Merge” Method&lt;/h3&gt;
&lt;p&gt;Merging is a bit tricky, but for us LINQ comes to the rescue. We can use something like &lt;a href=&quot;http://www.linqpad.net/&quot;&gt;LINQPad&lt;/a&gt; to mock this up. Essentially, we will switch the Language header on LINQPad to “Statement(s)” like the screenshot below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/LinqPadExpression.png&quot; alt=&quot;LINQPad Expression&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then inside the query editor window we can use the following snippet.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selected&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Added&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Removed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Essentially the first line that says selected.Except() is taking the set of ids from the left and producing a set with the values inside the .Except parameter. So in our case Added ids are 1 and 3.&lt;/p&gt;

&lt;p&gt;The second line uses database.Except() which takes the database items and creates a set of values that don’t match with the selected values. So in our example, the Removed id is just 5.&lt;/p&gt;

&lt;p&gt;The output would look like the following screenshot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/LinqPadExpressionResults.png&quot; alt=&quot;Cluster Screen #001&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="asp.net" /><category term="linq" /><summary type="html">When updating a database object using Entity Framework Core and ASP.NET Core there is a decent amount of complexity involved with handling what’s in the database and what is selected from the UI. ­ Scenario Say we have a table Post and another table Tag with a many-to-many relationship between them defined as PostTag. When the user is editing a post, they have the opportunity to select and de-select options that may already exist in the database. Below there are a few options in how to handle this, but one of the more performant options is to do more of a “merge” operation between what’s in the database and what is selected in the UI. The Brute Force Method One approach could be to call .Clear() on the collection and then call .Update(post) on the context. The issue with this is that we may be deleting items from the many-to-many table that we may want to keep in the database because they are still selected in the UI. The “Merge” Method Merging is a bit tricky, but for us LINQ comes to the rescue. We can use something like LINQPad to mock this up. Essentially, we will switch the Language header on LINQPad to “Statement(s)” like the screenshot below. Then inside the query editor window we can use the following snippet. var selected = new List&amp;lt;int&amp;gt;() { 1, 2, 3, 4 }; var database = new List&amp;lt;int&amp;gt;() { 2, 4, 5 }; selected.Except(database).Dump(&quot;Added&quot;); database.Except(selected).Dump(&quot;Removed&quot;); Essentially the first line that says selected.Except() is taking the set of ids from the left and producing a set with the values inside the .Except parameter. So in our case Added ids are 1 and 3. The second line uses database.Except() which takes the database items and creates a set of values that don’t match with the selected values. So in our example, the Removed id is just 5. The output would look like the following screenshot.</summary></entry><entry><title type="html">Useful Visual Studio Extensions</title><link href="http://localhost:4000/2017/10/01/useful-visual-studio-extensions/" rel="alternate" type="text/html" title="Useful Visual Studio Extensions" /><published>2017-10-01T09:15:00-07:00</published><updated>2017-10-01T09:15:00-07:00</updated><id>http://localhost:4000/2017/10/01/useful-visual-studio-extensions</id><content type="html" xml:base="http://localhost:4000/2017/10/01/useful-visual-studio-extensions/">&lt;p&gt;Visual Studio is currently my favorite development environment. The ability to extend and build out extra functionality such as code analysis and code formatting in my opinion makes me a lot more productive while building larger solutions.
­&lt;/p&gt;

&lt;h3 id=&quot;unifying-code&quot;&gt;Unifying Code&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.FixMixedTabs&quot;&gt;Mixed Tabs&lt;/a&gt; - This extension fixes tabs and spaces to be “tabs” to visual studio (which is defaulted to 4 spaces).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.PowerCommandsforVisualStudio&quot;&gt;Power Commands&lt;/a&gt; - Multiple extensions, but the most important one here is the “Format document on save” and “Remove and Sort Usings on save” functions. This used to not work on .NET Core projects, but it has been lately updated to support those project types as well. This will format the document (Ctrl + E, Ctrl + D) and remove / sort usings on save (Ctrl + R, Ctrl + G).&lt;/p&gt;

&lt;h3 id=&quot;visual-editors&quot;&gt;Visual Editors&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/madskristensen/MarkdownEditor&quot;&gt;Markdown Editor&lt;/a&gt; - This extension provides a split screen view of markdown files with their actual output. Very handy if you build markdown files.&lt;/p&gt;

&lt;h3 id=&quot;visual-studio-shortcuts&quot;&gt;Visual Studio Shortcuts&lt;/h3&gt;

&lt;p&gt;The rest of the functionality I use Visual Studio for can be done with the vanilla installation of Visual Studio 2017 Update 3 through keyboard shortcuts. Here are some shortcuts I use quite often.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;F12 : Go to definition.&lt;/li&gt;
  &lt;li&gt;F8 : Go to next issue. So if you have build errors, it goes to the next build error. If you searched for symbols Visual Studio will go to the next symbol.&lt;/li&gt;
  &lt;li&gt;Ctrl + . : Resolve code issue (the yellow lightbulb). Useful if a namespace is not recognized and you want to add the using statement for it.&lt;/li&gt;
  &lt;li&gt;Ctrl + , : “Go to All” functionality. Useful to go to a class and open the class file.&lt;/li&gt;
  &lt;li&gt;Ctrl + R, Ctrl + T : If inside a unit test method, it will debug that specific test method.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please comment below if there are other shortcuts and or extensions that you find useful.&lt;/p&gt;</content><author><name></name></author><category term="extensibility" /><category term="visual studio" /><summary type="html">Visual Studio is currently my favorite development environment. The ability to extend and build out extra functionality such as code analysis and code formatting in my opinion makes me a lot more productive while building larger solutions. ­ Unifying Code Mixed Tabs - This extension fixes tabs and spaces to be “tabs” to visual studio (which is defaulted to 4 spaces). Power Commands - Multiple extensions, but the most important one here is the “Format document on save” and “Remove and Sort Usings on save” functions. This used to not work on .NET Core projects, but it has been lately updated to support those project types as well. This will format the document (Ctrl + E, Ctrl + D) and remove / sort usings on save (Ctrl + R, Ctrl + G). Visual Editors Markdown Editor - This extension provides a split screen view of markdown files with their actual output. Very handy if you build markdown files. Visual Studio Shortcuts The rest of the functionality I use Visual Studio for can be done with the vanilla installation of Visual Studio 2017 Update 3 through keyboard shortcuts. Here are some shortcuts I use quite often. F12 : Go to definition. F8 : Go to next issue. So if you have build errors, it goes to the next build error. If you searched for symbols Visual Studio will go to the next symbol. Ctrl + . : Resolve code issue (the yellow lightbulb). Useful if a namespace is not recognized and you want to add the using statement for it. Ctrl + , : “Go to All” functionality. Useful to go to a class and open the class file. Ctrl + R, Ctrl + T : If inside a unit test method, it will debug that specific test method. Please comment below if there are other shortcuts and or extensions that you find useful.</summary></entry><entry><title type="html">Azure File Share and mklink</title><link href="http://localhost:4000/2017/09/14/azure-file-share-mklink/" rel="alternate" type="text/html" title="Azure File Share and mklink" /><published>2017-09-14T10:54:00-07:00</published><updated>2017-09-14T10:54:00-07:00</updated><id>http://localhost:4000/2017/09/14/azure-file-share-mklink</id><content type="html" xml:base="http://localhost:4000/2017/09/14/azure-file-share-mklink/">&lt;p&gt;One situation we ran into was figuring out how to store files to be shared across multiple virtual machines inside docker containers on an Azure VM. To solve for this problem, we created an Azure File Share and mounted it using net use. Then we used mklink to point a folder in the container to the file share.
­&lt;/p&gt;

&lt;p&gt;Creating an Azure File Share is fairly simple. First create the Azure Storage Account using the information below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/StorageAccount.png&quot; alt=&quot;Storage Account Steps&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then the next step is to go and create a new file share.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/FileService.png&quot; alt=&quot;File Share Steps&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From that point we will the command net use to setup the share to a physical drive letter.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;net use F: \\jwminecraftshare.file.core.windows.net\share /u:AZURE\jwminecraftshare [key]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then the next command below will link a local path to that drive share.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;mklink /d &quot;c:\Data&quot; &quot;\\jwminecraftshare.file.core.windows.net\share&quot; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From that point, inside the container we should be able to save files to c:\data and have it save out to the Azure File Service.&lt;/p&gt;</content><author><name></name></author><category term="dos" /><category term="docker" /><summary type="html">One situation we ran into was figuring out how to store files to be shared across multiple virtual machines inside docker containers on an Azure VM. To solve for this problem, we created an Azure File Share and mounted it using net use. Then we used mklink to point a folder in the container to the file share. ­ Creating an Azure File Share is fairly simple. First create the Azure Storage Account using the information below. Then the next step is to go and create a new file share. From that point we will the command net use to setup the share to a physical drive letter. net use F: \\jwminecraftshare.file.core.windows.net\share /u:AZURE\jwminecraftshare [key] Then the next command below will link a local path to that drive share. mklink /d &quot;c:\Data&quot; &quot;\\jwminecraftshare.file.core.windows.net\share&quot; From that point, inside the container we should be able to save files to c:\data and have it save out to the Azure File Service.</summary></entry><entry><title type="html">Bash on Windows Font Issues</title><link href="http://localhost:4000/2017/09/14/bash-on-windows-fonts/" rel="alternate" type="text/html" title="Bash on Windows Font Issues" /><published>2017-09-14T04:06:00-07:00</published><updated>2017-09-14T04:06:00-07:00</updated><id>http://localhost:4000/2017/09/14/bash-on-windows-fonts</id><content type="html" xml:base="http://localhost:4000/2017/09/14/bash-on-windows-fonts/">&lt;p&gt;When I started the bash on windows command prompt this morning the font and scaling looked incredibly odd.
­&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/BashOnWindowsBadFontSetting.png&quot; alt=&quot;Bash on Winndows Bad Font&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After looking through all of the information online, resetting the cmd.exe font and other settings. Was not able to fix the console. Eventually I was able to change it to a better font setting by editing the properties similar to below. Essentially I switched the font setting from Rastor to Lucinda Console and set a good font-size.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/BashOnWindowsFontSettings.png&quot; alt=&quot;Bash on Winndows Good Font&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Feel free to leave a comment below if you have better ideas on how to get the fonts and displays to show up better for the Bash on Windows console window.&lt;/p&gt;</content><author><name></name></author><category term="wsl" /><category term="bash on windows" /><summary type="html">When I started the bash on windows command prompt this morning the font and scaling looked incredibly odd. ­ After looking through all of the information online, resetting the cmd.exe font and other settings. Was not able to fix the console. Eventually I was able to change it to a better font setting by editing the properties similar to below. Essentially I switched the font setting from Rastor to Lucinda Console and set a good font-size. Feel free to leave a comment below if you have better ideas on how to get the fonts and displays to show up better for the Bash on Windows console window.</summary></entry><entry><title type="html">Duplicate Properties in Arm Templates</title><link href="http://localhost:4000/2017/09/05/duplicate-properties-template/" rel="alternate" type="text/html" title="Duplicate Properties in Arm Templates" /><published>2017-09-05T09:27:00-07:00</published><updated>2017-09-05T09:27:00-07:00</updated><id>http://localhost:4000/2017/09/05/duplicate-properties-template</id><content type="html" xml:base="http://localhost:4000/2017/09/05/duplicate-properties-template/">&lt;p&gt;When troubleshooting an Azure Resource Manager template, be sure to validate that there are not duplicate properties that exist in the parameters.json file.
­&lt;/p&gt;

&lt;p&gt;We were building an IoT Hub template for quick deployment in multiple regions on Azure. In the template, we wanted to add a “routing” property to the json to create endpoints and routes for the IoT Hub.&lt;/p&gt;

&lt;p&gt;The resource provider for the IoT Hub did not reply with any error messages, only a success message and the end results being that our endpoints and routes did not exist in the Azure portal.&lt;/p&gt;

&lt;p&gt;An example of our json to create these endpoints.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;routing&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;endpoints&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;serviceBusQueues&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;serviceBusTopics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;eventHubs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;connectionString&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[concat('Endpoint=sb://', parameters('iotHubServiceBusName'), '.servicebus.windows.net:5671/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=', parameters('iotHubServiceBusKey'), ';EntityPath=hubdata')]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hub&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;subscriptionId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;resourceGroup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iotdata&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;routes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Route&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;source&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;DeviceMessages&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;condition&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;payloadType = \&quot;Data\&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;endpointNames&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Energy&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;isEnabled&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The problem is that in our Azure Resource Manager template, further down in the json we had another “routing” property that looked like the following code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;routing&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Because of this our IoT Hub instance in the Azure portal was taking the second definition and not deploying any endpoints or routes to the IoT Hub instance.&lt;/p&gt;

&lt;p&gt;In a future post, we will walk through utilizing the &lt;a href=&quot;https://github.com/Azure/azure-arm-validator&quot;&gt;azure-arm-validator&lt;/a&gt; on GitHub to ensure that the json is valid.&lt;/p&gt;</content><author><name></name></author><category term="azure" /><category term="arm template" /><summary type="html">When troubleshooting an Azure Resource Manager template, be sure to validate that there are not duplicate properties that exist in the parameters.json file. ­ We were building an IoT Hub template for quick deployment in multiple regions on Azure. In the template, we wanted to add a “routing” property to the json to create endpoints and routes for the IoT Hub. The resource provider for the IoT Hub did not reply with any error messages, only a success message and the end results being that our endpoints and routes did not exist in the Azure portal. An example of our json to create these endpoints. &quot;routing&quot;: { &quot;endpoints&quot;: { &quot;serviceBusQueues&quot;: [], &quot;serviceBusTopics&quot;: [], &quot;eventHubs&quot;: [ { &quot;connectionString&quot;: &quot;[concat('Endpoint=sb://', parameters('iotHubServiceBusName'), '.servicebus.windows.net:5671/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=', parameters('iotHubServiceBusKey'), ';EntityPath=hubdata')]&quot;, &quot;name&quot;: &quot;Hub&quot;, &quot;subscriptionId&quot;: &quot;...&quot;, &quot;resourceGroup&quot;: &quot;iotdata&quot; } ] }, &quot;routes&quot;: [ { &quot;name&quot;: &quot;Route&quot;, &quot;source&quot;: &quot;DeviceMessages&quot;, &quot;condition&quot;: &quot;payloadType = \&quot;Data\&quot;&quot;, &quot;endpointNames&quot;: [ &quot;Energy&quot; ], &quot;isEnabled&quot;: true } ] }, The problem is that in our Azure Resource Manager template, further down in the json we had another “routing” property that looked like the following code. &quot;routing&quot;: { } Because of this our IoT Hub instance in the Azure portal was taking the second definition and not deploying any endpoints or routes to the IoT Hub instance. In a future post, we will walk through utilizing the azure-arm-validator on GitHub to ensure that the json is valid.</summary></entry><entry><title type="html">Creating Managed Disks from Template</title><link href="http://localhost:4000/2017/08/22/using-managed-disks-from-arm/" rel="alternate" type="text/html" title="Creating Managed Disks from Template" /><published>2017-08-22T06:24:00-07:00</published><updated>2017-08-22T06:24:00-07:00</updated><id>http://localhost:4000/2017/08/22/using-managed-disks-from-arm</id><content type="html" xml:base="http://localhost:4000/2017/08/22/using-managed-disks-from-arm/">&lt;p&gt;Most of the templates on the &lt;a href=&quot;https://github.com/Azure/azure-quickstart-templates&quot;&gt;Azure Quick Start&lt;/a&gt; GitHub repository are using storage accounts rather than managed disks at the moment (including the Service Fabric cluster one). Here is what you would need to change in order to move over to managed disks instead of regular storage accounts.
­&lt;/p&gt;

&lt;p&gt;First, we would want to remove any references to the storage account(s) so that we can clean up properties that are not needed for Storage Accounts.&lt;/p&gt;

&lt;p&gt;Secondly, we want to add / change the “osDisk” property of the VM Scale Set to the below, removing other properties in the “osDisk” property.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;osDisk&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;createOption&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FromImage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;managedDisk&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;storageAccountType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Premium_LRS&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dataDisks&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;lun&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;createOption&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Empty&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;diskSizeGB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;managedDisk&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;storageAccountType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Premium_LRS&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Additionally, we want to change the Api Version for the VM Scale Set to be 2016-03-30 or later.&lt;/p&gt;

&lt;p&gt;After the three above changes, the VM Scale Set should be configured properly to use Managed Disks.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/virtual-machines/windows/migrate-to-managed-disks&quot;&gt;Migrating Azure VMs to Managed Disks in Azure&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Azure-Samples/resources-dotnet-deploy-virtual-machine-with-managed-disks-using-arm-template/tree/master/Asset&quot;&gt;Migrating ARM Template&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="azure" /><category term="arm" /><category term="template" /><summary type="html">Most of the templates on the Azure Quick Start GitHub repository are using storage accounts rather than managed disks at the moment (including the Service Fabric cluster one). Here is what you would need to change in order to move over to managed disks instead of regular storage accounts. ­ First, we would want to remove any references to the storage account(s) so that we can clean up properties that are not needed for Storage Accounts. Secondly, we want to add / change the “osDisk” property of the VM Scale Set to the below, removing other properties in the “osDisk” property. &quot;osDisk&quot;: { &quot;createOption&quot;: &quot;FromImage&quot;, &quot;managedDisk&quot;: { &quot;storageAccountType&quot;: &quot;Premium_LRS&quot; } }, &quot;dataDisks&quot;: [ { &quot;lun&quot;: 1, &quot;createOption&quot;: &quot;Empty&quot;, &quot;diskSizeGB&quot;: 512, &quot;managedDisk&quot;: { &quot;storageAccountType&quot;: &quot;Premium_LRS&quot; } } ] } Additionally, we want to change the Api Version for the VM Scale Set to be 2016-03-30 or later. After the three above changes, the VM Scale Set should be configured properly to use Managed Disks. References: Migrating Azure VMs to Managed Disks in Azure Migrating ARM Template</summary></entry><entry><title type="html">Service Fabric with Windows Containers</title><link href="http://localhost:4000/2017/08/21/service-fabric-windows-containers/" rel="alternate" type="text/html" title="Service Fabric with Windows Containers" /><published>2017-08-21T15:12:00-07:00</published><updated>2017-08-21T15:12:00-07:00</updated><id>http://localhost:4000/2017/08/21/service-fabric-windows-containers</id><content type="html" xml:base="http://localhost:4000/2017/08/21/service-fabric-windows-containers/">&lt;p&gt;If you are interested in running service fabric with Windows containers there are a few things to consider while the functionality is in public preview. 
­&lt;/p&gt;

&lt;p&gt;First, when you spin up the service fabric cluster it needs some additional settings in order to build the Virtual Machine scale set properly.&lt;/p&gt;

&lt;p&gt;When creating the cluster, we need to set the operating system to WindowsServer-2016-Datacenter-with-Containers. This enables the virtual machines in the virtual machine scale set to have the right operating system setup to allow support for containers inside a virtualized environment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ClusterScreen-001.png&quot; alt=&quot;Cluster Screen #001&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next two settings that need to be set are on step #2 where we are configuring the cluster configuration. Here we need to select “Show optional settings”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ClusterScreen-002.png&quot; alt=&quot;Cluster Screen #002&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then on the optional settings screen, we need to ensure that “include DNS service” is selected and that the Fabric version is set to “Manual” and “255.255.5718.255 (preview). The first setting enables the ability for containers to see each other as Windows requires DNS services in order for host names to be assigned to them. Docker will not do this for a Windows container. The Fabric version is also required as it enables the orchistration needed to support composition of Docker containers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ClusterScreen-003.png&quot; alt=&quot;Cluster Screen #003&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Setting up the cluster in this particular way will allow you to run Windows containers inside Service Fabric.&lt;/p&gt;</content><author><name></name></author><category term="windows" /><category term="containers" /><category term="docker" /><category term="service fabric" /><summary type="html">If you are interested in running service fabric with Windows containers there are a few things to consider while the functionality is in public preview. ­ First, when you spin up the service fabric cluster it needs some additional settings in order to build the Virtual Machine scale set properly. When creating the cluster, we need to set the operating system to WindowsServer-2016-Datacenter-with-Containers. This enables the virtual machines in the virtual machine scale set to have the right operating system setup to allow support for containers inside a virtualized environment. The next two settings that need to be set are on step #2 where we are configuring the cluster configuration. Here we need to select “Show optional settings”. Then on the optional settings screen, we need to ensure that “include DNS service” is selected and that the Fabric version is set to “Manual” and “255.255.5718.255 (preview). The first setting enables the ability for containers to see each other as Windows requires DNS services in order for host names to be assigned to them. Docker will not do this for a Windows container. The Fabric version is also required as it enables the orchistration needed to support composition of Docker containers. Setting up the cluster in this particular way will allow you to run Windows containers inside Service Fabric.</summary></entry><entry><title type="html">Create and Format a Disk in a Windows Container</title><link href="http://localhost:4000/2017/08/20/create-format-map-drive-on-managed-disks/" rel="alternate" type="text/html" title="Create and Format a Disk in a Windows Container" /><published>2017-08-20T15:12:00-07:00</published><updated>2017-08-20T15:12:00-07:00</updated><id>http://localhost:4000/2017/08/20/create-format-map-drive-on-managed-disks</id><content type="html" xml:base="http://localhost:4000/2017/08/20/create-format-map-drive-on-managed-disks/">&lt;p&gt;If you find yourself working with Windows Containers, there might be a need to utilize data drives etc from Managed Disks.
­&lt;/p&gt;

&lt;p&gt;In order to support this, we can leverage PowerShell to run a few management tasks from an Azure Resource Management template.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;Get-Disk | &lt;span class=&quot;nb&quot;&gt;Where &lt;/span&gt;partitionstyle -eq &lt;span class=&quot;s1&quot;&gt;'raw'&lt;/span&gt; | Initialize-Disk -PartitionStyle MBR -PassThru | New-Partition -AssignDriveLetter -UseMaximumSize | Format-Volume -FileSystem NTFS -NewFileSystemLabel &lt;span class=&quot;s2&quot;&gt;&quot;datadisk&quot;&lt;/span&gt; -Confirm:&lt;span class=&quot;nv&quot;&gt;$false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The Get-Disk commandlet lists all of the disks attached to the machine (including raw unformatted drives).&lt;/p&gt;

&lt;p&gt;The pipe into the Where commandlet just searches for drives that aren’t assigned a drive letter.&lt;/p&gt;

&lt;p&gt;The Initialize-Disk commandlet sets a disk up using GPT or MBR with the -PartitionStyle flag.&lt;/p&gt;

&lt;p&gt;The New-Partition commandlet assigns a drive letter and partitions it to the disk manager.&lt;/p&gt;

&lt;p&gt;The last commandlet Format-Volume formats the drive as NTFS and puts a label on it.&lt;/p&gt;</content><author><name></name></author><category term="windows" /><category term="containers" /><summary type="html">If you find yourself working with Windows Containers, there might be a need to utilize data drives etc from Managed Disks. ­ In order to support this, we can leverage PowerShell to run a few management tasks from an Azure Resource Management template. Get-Disk | Where partitionstyle -eq 'raw' | Initialize-Disk -PartitionStyle MBR -PassThru | New-Partition -AssignDriveLetter -UseMaximumSize | Format-Volume -FileSystem NTFS -NewFileSystemLabel &quot;datadisk&quot; -Confirm:$false The Get-Disk commandlet lists all of the disks attached to the machine (including raw unformatted drives). The pipe into the Where commandlet just searches for drives that aren’t assigned a drive letter. The Initialize-Disk commandlet sets a disk up using GPT or MBR with the -PartitionStyle flag. The New-Partition commandlet assigns a drive letter and partitions it to the disk manager. The last commandlet Format-Volume formats the drive as NTFS and puts a label on it.</summary></entry><entry><title type="html">Configuring Docker Inside a Service Fabric VM</title><link href="http://localhost:4000/2017/08/19/configure-docker-from-service-fabric-vm/" rel="alternate" type="text/html" title="Configuring Docker Inside a Service Fabric VM" /><published>2017-08-19T15:12:00-07:00</published><updated>2017-08-19T15:12:00-07:00</updated><id>http://localhost:4000/2017/08/19/configure-docker-from-service-fabric-vm</id><content type="html" xml:base="http://localhost:4000/2017/08/19/configure-docker-from-service-fabric-vm/">&lt;p&gt;If there are ever any settings that need to be changed inside the Docker service that is running inside a Virtual Machine under Service Fabric the only way to accomplish this is through an Azure Resource Manager Virtual Machine Extension.
­&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;virtualMachineProfile&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;extensionProfile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;extensions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;properties&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;publisher&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Microsoft.Compute&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CustomScriptExtension&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;typeHandlerVersion&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;autoUpgradeMinorVersion&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;settings&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;fileUris&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://iotdata.blob.core.windows.net/deployment/configdocker.ps1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;commandToExecute&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;powershell -ExecutionPolicy Unrestricted -File dockerpull.ps1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;forceUpdateTag&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[parameters('vmExtensionVersion')]&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CustomScriptExtensionDockerPull&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can put the following code into the configdocker.ps1 file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;New-Item&lt;/span&gt; -Path &lt;span class=&quot;s2&quot;&gt;&quot;F:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ocker&quot;&lt;/span&gt; -Type Directory
&lt;span class=&quot;nb&quot;&gt;Set-Content&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;C:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\P&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;rogramData&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ocker&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;onfig&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;aemon.json&quot;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;graph&quot;: &quot;F:\\Docker&quot;}'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Stop-Process&lt;/span&gt; -ProcessName dockerd -Force
&lt;span class=&quot;nb&quot;&gt;Start-Sleep&lt;/span&gt; -s 1
&lt;span class=&quot;nb&quot;&gt;Remove-Item&lt;/span&gt; -Path &lt;span class=&quot;s2&quot;&gt;&quot;C:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\P&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;rogramData&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ocker&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ocker.pid&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Start-Sleep&lt;/span&gt; -s 1
&lt;span class=&quot;nb&quot;&gt;Start-Service&lt;/span&gt; -DisplayName &lt;span class=&quot;s2&quot;&gt;&quot;Docker&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Start-Sleep&lt;/span&gt; -s 1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Essentially, we are going to tell it to use the F:\ data disk drive for docker images rather than the C:\ drive (this might be for performance or other reasons).&lt;/p&gt;

&lt;p&gt;The first line creates a new docker folder.&lt;/p&gt;

&lt;p&gt;The Set-Content line creates a new file with the json configuration in it per the &lt;a href=&quot;https://docs.docker.com/engine/admin/systemd/#runtime-directory-and-storage-driver&quot;&gt;Docker website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We then stop the process, sleep, remove the .pid and then start the process after that. The sleep statements were unfortunately needed because of the timing that it might take for the Docker service to actually stop.&lt;/p&gt;</content><author><name></name></author><category term="windows" /><category term="containers" /><category term="docker" /><category term="service fabric" /><summary type="html">If there are ever any settings that need to be changed inside the Docker service that is running inside a Virtual Machine under Service Fabric the only way to accomplish this is through an Azure Resource Manager Virtual Machine Extension. ­ &quot;virtualMachineProfile&quot;: { &quot;extensionProfile&quot;: { &quot;extensions&quot;: [ { &quot;properties&quot;: { &quot;publisher&quot;: &quot;Microsoft.Compute&quot;, &quot;type&quot;: &quot;CustomScriptExtension&quot;, &quot;typeHandlerVersion&quot;: &quot;1.7&quot;, &quot;autoUpgradeMinorVersion&quot;: false, &quot;settings&quot;: { &quot;fileUris&quot;: [ &quot;https://iotdata.blob.core.windows.net/deployment/configdocker.ps1&quot; ], &quot;commandToExecute&quot;: &quot;powershell -ExecutionPolicy Unrestricted -File dockerpull.ps1&quot; }, &quot;forceUpdateTag&quot;: &quot;[parameters('vmExtensionVersion')]&quot; }, &quot;name&quot;: &quot;CustomScriptExtensionDockerPull&quot; } ] }, We can put the following code into the configdocker.ps1 file. New-Item -Path &quot;F:\Docker&quot; -Type Directory Set-Content &quot;C:\ProgramData\docker\config\daemon.json&quot; '{&quot;graph&quot;: &quot;F:\\Docker&quot;}' Stop-Process -ProcessName dockerd -Force Start-Sleep -s 1 Remove-Item -Path &quot;C:\ProgramData\docker\docker.pid&quot; Start-Sleep -s 1 Start-Service -DisplayName &quot;Docker&quot; Start-Sleep -s 1 Essentially, we are going to tell it to use the F:\ data disk drive for docker images rather than the C:\ drive (this might be for performance or other reasons). The first line creates a new docker folder. The Set-Content line creates a new file with the json configuration in it per the Docker website. We then stop the process, sleep, remove the .pid and then start the process after that. The sleep statements were unfortunately needed because of the timing that it might take for the Docker service to actually stop.</summary></entry><entry><title type="html">Docker Windows Image for IoT Edge</title><link href="http://localhost:4000/2017/08/18/docker-image-net-node-core/" rel="alternate" type="text/html" title="Docker Windows Image for IoT Edge" /><published>2017-08-18T08:05:00-07:00</published><updated>2017-08-18T08:05:00-07:00</updated><id>http://localhost:4000/2017/08/18/docker-image-net-node-core</id><content type="html" xml:base="http://localhost:4000/2017/08/18/docker-image-net-node-core/">&lt;p&gt;We were in a scenario where we wanted to enable &lt;a href=&quot;https://github.com/azure/iot-edge&quot;&gt;IoT Edge&lt;/a&gt; to run on a Windows Server Core docker container so that we could run some scenarios. We couldn’t find a good way of doing this all in one Dockerfile, but found a way to merge a few Dockerfiles into one.
­&lt;/p&gt;

&lt;p&gt;The gist of the cleaned up result is below:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/8026445ec866fb10b62f85c4eae4f0d4.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Looking more closely at the Dockerfile, let’s walk through what each section means.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-docker&quot; data-lang=&quot;docker&quot;&gt;FROM microsoft/windowsservercore

SHELL [&quot;powershell&quot;, &quot;-Command&quot;, &quot;$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';&quot;]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first line tells Docker to utilize the &lt;a href=&quot;https://hub.docker.com/r/microsoft/windowsservercore/&quot;&gt;windowsservercore&lt;/a&gt; base image. The second line tells Docker to switch the command shell to PowerShell and to stop on any error messages, but continue on progress updates.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-docker&quot; data-lang=&quot;docker&quot;&gt;RUN Invoke-WebRequest -Uri &quot;https://download.microsoft.com/download/D/D/3/DD35CC25-6E9C-484B-A746-C5BE0C923290/NDP47-KB3186497-x86-x64-AllOS-ENU.exe&quot; -OutFile NDP47-KB3186497-x86-x64-AllOS-ENU.exe
RUN .\NDP47-KB3186497-x86-x64-AllOS-ENU.exe /q
RUN del .\NDP47-KB3186497-x86-x64-AllOS-ENU.exe&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first RUN command above downloads the latest version of .NET Framework 4.7 and places it to an .exe file. The second line runs the .exe with the ‘/q’ or quiet flag to avoid output and installer window. The third RUN command removes the excess .exe after the full framework installs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-docker&quot; data-lang=&quot;docker&quot;&gt;ENV DOTNET_SDK_VERSION 1.0.4
ENV DOTNET_SDK_DOWNLOAD_URL https://dotnetcli.blob.core.windows.net/dotnet/Sdk/$DOTNET_SDK_VERSION/dotnet-dev-win-x64.$DOTNET_SDK_VERSION.zip

RUN Invoke-WebRequest $Env:DOTNET_SDK_DOWNLOAD_URL -OutFile dotnet.zip; \
Expand-Archive dotnet.zip -DestinationPath $Env:ProgramFiles\dotnet; \
Remove-Item -Force dotnet.zip

RUN setx /M PATH $($Env:PATH + ';' + $Env:ProgramFiles + '\dotnet')&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first two lines set up environment variables for .NET Core. The RUN Invoke-WebRequest line downloads the .NET Core SDK. Expand-Archive is a PowerShell way to unzip a zip file, and we can unzip the downloaded .zip directly into program files. The Remove-Item command deletes the .zip file using PowerShell. The last RUN setx command here, sets the path environment variable globally (not just for this shell) to point to the new dotnet folder in Program Files.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-docker&quot; data-lang=&quot;docker&quot;&gt;ENV NUGET_XMLDOC_MODE skip
RUN New-Item -Type Directory warmup; \
cd warmup; \
dotnet new; \
cd ..; \
Remove-Item -Force -Recurse warmup&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These next few lines are here just to warm the dotnet cli up so that future calls aren’t initially slow (useful to avoid long startup times).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-docker&quot; data-lang=&quot;docker&quot;&gt;ENV NODE_VERSION 8.2.1

RUN Invoke-WebRequest $('https://nodejs.org/dist/v{0}/node-v{0}-win-x64.zip' -f $env:NODE_VERSION) -OutFile 'node.zip'; \
Expand-Archive node.zip -DestinationPath C:\ ; \
Rename-Item -Path $('C:\node-v{0}-win-x64' -f $env:NODE_VERSION) -NewName 'C:\nodejs'

ENV NPM_CONFIG_LOGLEVEL info

RUN New-Item $($env:APPDATA + '\npm') ; \
$env:PATH = 'C:\nodejs;{0}\npm;{1}' -f $env:APPDATA, $env:PATH ; \
[Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is setting an environment variable for NODE_VERSION, then downloading that version of Node through .zip file. The final step then extracts those contents to C:\nodejs and deletes the .zip file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-docker&quot; data-lang=&quot;docker&quot;&gt;RUN Invoke-WebRequest $('https://download.microsoft.com/download/3/b/f/3bf6e759-c555-4595-8973-86b7b4312927/vc_redist.x64.exe') -OutFile vcredist.exe
RUN .\vcredist.exe /q
RUN del .\vcredist.exe&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The last few lines here download the vc_redist_x64 and install it (useful for IoT Edge).&lt;/p&gt;</content><author><name></name></author><category term="docker" /><category term="windows" /><category term=".net framework" /><category term=".net core" /><category term="node" /><summary type="html">We were in a scenario where we wanted to enable IoT Edge to run on a Windows Server Core docker container so that we could run some scenarios. We couldn’t find a good way of doing this all in one Dockerfile, but found a way to merge a few Dockerfiles into one. ­ The gist of the cleaned up result is below: 400: Invalid request Looking more closely at the Dockerfile, let’s walk through what each section means. FROM microsoft/windowsservercore SHELL [&quot;powershell&quot;, &quot;-Command&quot;, &quot;$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';&quot;] The first line tells Docker to utilize the windowsservercore base image. The second line tells Docker to switch the command shell to PowerShell and to stop on any error messages, but continue on progress updates. RUN Invoke-WebRequest -Uri &quot;https://download.microsoft.com/download/D/D/3/DD35CC25-6E9C-484B-A746-C5BE0C923290/NDP47-KB3186497-x86-x64-AllOS-ENU.exe&quot; -OutFile NDP47-KB3186497-x86-x64-AllOS-ENU.exe RUN .\NDP47-KB3186497-x86-x64-AllOS-ENU.exe /q RUN del .\NDP47-KB3186497-x86-x64-AllOS-ENU.exe The first RUN command above downloads the latest version of .NET Framework 4.7 and places it to an .exe file. The second line runs the .exe with the ‘/q’ or quiet flag to avoid output and installer window. The third RUN command removes the excess .exe after the full framework installs. ENV DOTNET_SDK_VERSION 1.0.4 ENV DOTNET_SDK_DOWNLOAD_URL https://dotnetcli.blob.core.windows.net/dotnet/Sdk/$DOTNET_SDK_VERSION/dotnet-dev-win-x64.$DOTNET_SDK_VERSION.zip RUN Invoke-WebRequest $Env:DOTNET_SDK_DOWNLOAD_URL -OutFile dotnet.zip; \ Expand-Archive dotnet.zip -DestinationPath $Env:ProgramFiles\dotnet; \ Remove-Item -Force dotnet.zip RUN setx /M PATH $($Env:PATH + ';' + $Env:ProgramFiles + '\dotnet') The first two lines set up environment variables for .NET Core. The RUN Invoke-WebRequest line downloads the .NET Core SDK. Expand-Archive is a PowerShell way to unzip a zip file, and we can unzip the downloaded .zip directly into program files. The Remove-Item command deletes the .zip file using PowerShell. The last RUN setx command here, sets the path environment variable globally (not just for this shell) to point to the new dotnet folder in Program Files. ENV NUGET_XMLDOC_MODE skip RUN New-Item -Type Directory warmup; \ cd warmup; \ dotnet new; \ cd ..; \ Remove-Item -Force -Recurse warmup These next few lines are here just to warm the dotnet cli up so that future calls aren’t initially slow (useful to avoid long startup times). ENV NODE_VERSION 8.2.1 RUN Invoke-WebRequest $('https://nodejs.org/dist/v{0}/node-v{0}-win-x64.zip' -f $env:NODE_VERSION) -OutFile 'node.zip'; \ Expand-Archive node.zip -DestinationPath C:\ ; \ Rename-Item -Path $('C:\node-v{0}-win-x64' -f $env:NODE_VERSION) -NewName 'C:\nodejs' ENV NPM_CONFIG_LOGLEVEL info RUN New-Item $($env:APPDATA + '\npm') ; \ $env:PATH = 'C:\nodejs;{0}\npm;{1}' -f $env:APPDATA, $env:PATH ; \ [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine) This is setting an environment variable for NODE_VERSION, then downloading that version of Node through .zip file. The final step then extracts those contents to C:\nodejs and deletes the .zip file. RUN Invoke-WebRequest $('https://download.microsoft.com/download/3/b/f/3bf6e759-c555-4595-8973-86b7b4312927/vc_redist.x64.exe') -OutFile vcredist.exe RUN .\vcredist.exe /q RUN del .\vcredist.exe The last few lines here download the vc_redist_x64 and install it (useful for IoT Edge).</summary></entry></feed>